// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egm_wrapper.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_egm_5fwrapper_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_egm_5fwrapper_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_egm_5fwrapper_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_egm_5fwrapper_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_egm_5fwrapper_2eproto;
namespace abb {
namespace egm {
namespace wrapper {
class Cartesian;
class CartesianDefaultTypeInternal;
extern CartesianDefaultTypeInternal _Cartesian_default_instance_;
class CartesianPose;
class CartesianPoseDefaultTypeInternal;
extern CartesianPoseDefaultTypeInternal _CartesianPose_default_instance_;
class CartesianSpace;
class CartesianSpaceDefaultTypeInternal;
extern CartesianSpaceDefaultTypeInternal _CartesianSpace_default_instance_;
class CartesianVelocity;
class CartesianVelocityDefaultTypeInternal;
extern CartesianVelocityDefaultTypeInternal _CartesianVelocity_default_instance_;
class Clock;
class ClockDefaultTypeInternal;
extern ClockDefaultTypeInternal _Clock_default_instance_;
class Euler;
class EulerDefaultTypeInternal;
extern EulerDefaultTypeInternal _Euler_default_instance_;
class External;
class ExternalDefaultTypeInternal;
extern ExternalDefaultTypeInternal _External_default_instance_;
class Feedback;
class FeedbackDefaultTypeInternal;
extern FeedbackDefaultTypeInternal _Feedback_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class JointSpace;
class JointSpaceDefaultTypeInternal;
extern JointSpaceDefaultTypeInternal _JointSpace_default_instance_;
class Joints;
class JointsDefaultTypeInternal;
extern JointsDefaultTypeInternal _Joints_default_instance_;
class Output;
class OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class Planned;
class PlannedDefaultTypeInternal;
extern PlannedDefaultTypeInternal _Planned_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace wrapper
}  // namespace egm
}  // namespace abb
PROTOBUF_NAMESPACE_OPEN
template<> ::abb::egm::wrapper::Cartesian* Arena::CreateMaybeMessage<::abb::egm::wrapper::Cartesian>(Arena*);
template<> ::abb::egm::wrapper::CartesianPose* Arena::CreateMaybeMessage<::abb::egm::wrapper::CartesianPose>(Arena*);
template<> ::abb::egm::wrapper::CartesianSpace* Arena::CreateMaybeMessage<::abb::egm::wrapper::CartesianSpace>(Arena*);
template<> ::abb::egm::wrapper::CartesianVelocity* Arena::CreateMaybeMessage<::abb::egm::wrapper::CartesianVelocity>(Arena*);
template<> ::abb::egm::wrapper::Clock* Arena::CreateMaybeMessage<::abb::egm::wrapper::Clock>(Arena*);
template<> ::abb::egm::wrapper::Euler* Arena::CreateMaybeMessage<::abb::egm::wrapper::Euler>(Arena*);
template<> ::abb::egm::wrapper::External* Arena::CreateMaybeMessage<::abb::egm::wrapper::External>(Arena*);
template<> ::abb::egm::wrapper::Feedback* Arena::CreateMaybeMessage<::abb::egm::wrapper::Feedback>(Arena*);
template<> ::abb::egm::wrapper::Header* Arena::CreateMaybeMessage<::abb::egm::wrapper::Header>(Arena*);
template<> ::abb::egm::wrapper::Input* Arena::CreateMaybeMessage<::abb::egm::wrapper::Input>(Arena*);
template<> ::abb::egm::wrapper::JointSpace* Arena::CreateMaybeMessage<::abb::egm::wrapper::JointSpace>(Arena*);
template<> ::abb::egm::wrapper::Joints* Arena::CreateMaybeMessage<::abb::egm::wrapper::Joints>(Arena*);
template<> ::abb::egm::wrapper::Output* Arena::CreateMaybeMessage<::abb::egm::wrapper::Output>(Arena*);
template<> ::abb::egm::wrapper::Planned* Arena::CreateMaybeMessage<::abb::egm::wrapper::Planned>(Arena*);
template<> ::abb::egm::wrapper::Quaternion* Arena::CreateMaybeMessage<::abb::egm::wrapper::Quaternion>(Arena*);
template<> ::abb::egm::wrapper::Robot* Arena::CreateMaybeMessage<::abb::egm::wrapper::Robot>(Arena*);
template<> ::abb::egm::wrapper::Status* Arena::CreateMaybeMessage<::abb::egm::wrapper::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace abb {
namespace egm {
namespace wrapper {

enum Header_MessageType : int {
  Header_MessageType_UNDEFINED = 0,
  Header_MessageType_DATA = 1
};
bool Header_MessageType_IsValid(int value);
constexpr Header_MessageType Header_MessageType_MessageType_MIN = Header_MessageType_UNDEFINED;
constexpr Header_MessageType Header_MessageType_MessageType_MAX = Header_MessageType_DATA;
constexpr int Header_MessageType_MessageType_ARRAYSIZE = Header_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Header_MessageType_descriptor();
template<typename T>
inline const std::string& Header_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Header_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Header_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Header_MessageType_descriptor(), enum_t_value);
}
inline bool Header_MessageType_Parse(
    const std::string& name, Header_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Header_MessageType>(
    Header_MessageType_descriptor(), name, value);
}
enum Status_EGMState : int {
  Status_EGMState_EGM_UNDEFINED = 0,
  Status_EGMState_EGM_ERROR = 1,
  Status_EGMState_EGM_STOPPED = 2,
  Status_EGMState_EGM_RUNNING = 3
};
bool Status_EGMState_IsValid(int value);
constexpr Status_EGMState Status_EGMState_EGMState_MIN = Status_EGMState_EGM_UNDEFINED;
constexpr Status_EGMState Status_EGMState_EGMState_MAX = Status_EGMState_EGM_RUNNING;
constexpr int Status_EGMState_EGMState_ARRAYSIZE = Status_EGMState_EGMState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_EGMState_descriptor();
template<typename T>
inline const std::string& Status_EGMState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_EGMState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_EGMState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_EGMState_descriptor(), enum_t_value);
}
inline bool Status_EGMState_Parse(
    const std::string& name, Status_EGMState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_EGMState>(
    Status_EGMState_descriptor(), name, value);
}
enum Status_MotorState : int {
  Status_MotorState_MOTORS_UNDEFINED = 0,
  Status_MotorState_MOTORS_ON = 1,
  Status_MotorState_MOTORS_OFF = 2
};
bool Status_MotorState_IsValid(int value);
constexpr Status_MotorState Status_MotorState_MotorState_MIN = Status_MotorState_MOTORS_UNDEFINED;
constexpr Status_MotorState Status_MotorState_MotorState_MAX = Status_MotorState_MOTORS_OFF;
constexpr int Status_MotorState_MotorState_ARRAYSIZE = Status_MotorState_MotorState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_MotorState_descriptor();
template<typename T>
inline const std::string& Status_MotorState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_MotorState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_MotorState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_MotorState_descriptor(), enum_t_value);
}
inline bool Status_MotorState_Parse(
    const std::string& name, Status_MotorState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_MotorState>(
    Status_MotorState_descriptor(), name, value);
}
enum Status_RAPIDExecutionState : int {
  Status_RAPIDExecutionState_RAPID_UNDEFINED = 0,
  Status_RAPIDExecutionState_RAPID_STOPPED = 1,
  Status_RAPIDExecutionState_RAPID_RUNNING = 2
};
bool Status_RAPIDExecutionState_IsValid(int value);
constexpr Status_RAPIDExecutionState Status_RAPIDExecutionState_RAPIDExecutionState_MIN = Status_RAPIDExecutionState_RAPID_UNDEFINED;
constexpr Status_RAPIDExecutionState Status_RAPIDExecutionState_RAPIDExecutionState_MAX = Status_RAPIDExecutionState_RAPID_RUNNING;
constexpr int Status_RAPIDExecutionState_RAPIDExecutionState_ARRAYSIZE = Status_RAPIDExecutionState_RAPIDExecutionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_RAPIDExecutionState_descriptor();
template<typename T>
inline const std::string& Status_RAPIDExecutionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_RAPIDExecutionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_RAPIDExecutionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_RAPIDExecutionState_descriptor(), enum_t_value);
}
inline bool Status_RAPIDExecutionState_Parse(
    const std::string& name, Status_RAPIDExecutionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_RAPIDExecutionState>(
    Status_RAPIDExecutionState_descriptor(), name, value);
}
// ===================================================================

class Header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Header_MessageType MessageType;
  static constexpr MessageType UNDEFINED =
    Header_MessageType_UNDEFINED;
  static constexpr MessageType DATA =
    Header_MessageType_DATA;
  static inline bool MessageType_IsValid(int value) {
    return Header_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Header_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Header_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Header_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Header_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return Header_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return Header_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNumberFieldNumber = 1,
    kTimeStampFieldNumber = 2,
    kMessageTypeFieldNumber = 3,
  };
  // optional uint32 sequence_number = 1;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .abb.egm.wrapper.Header.MessageType message_type = 3 [default = UNDEFINED];
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  ::abb::egm::wrapper::Header_MessageType message_type() const;
  void set_message_type(::abb::egm::wrapper::Header_MessageType value);
  private:
  ::abb::egm::wrapper::Header_MessageType _internal_message_type() const;
  void _internal_set_message_type(::abb::egm::wrapper::Header_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Header)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_stamp_;
  int message_type_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Status :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Status";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Status_EGMState EGMState;
  static constexpr EGMState EGM_UNDEFINED =
    Status_EGMState_EGM_UNDEFINED;
  static constexpr EGMState EGM_ERROR =
    Status_EGMState_EGM_ERROR;
  static constexpr EGMState EGM_STOPPED =
    Status_EGMState_EGM_STOPPED;
  static constexpr EGMState EGM_RUNNING =
    Status_EGMState_EGM_RUNNING;
  static inline bool EGMState_IsValid(int value) {
    return Status_EGMState_IsValid(value);
  }
  static constexpr EGMState EGMState_MIN =
    Status_EGMState_EGMState_MIN;
  static constexpr EGMState EGMState_MAX =
    Status_EGMState_EGMState_MAX;
  static constexpr int EGMState_ARRAYSIZE =
    Status_EGMState_EGMState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGMState_descriptor() {
    return Status_EGMState_descriptor();
  }
  template<typename T>
  static inline const std::string& EGMState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGMState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGMState_Name.");
    return Status_EGMState_Name(enum_t_value);
  }
  static inline bool EGMState_Parse(const std::string& name,
      EGMState* value) {
    return Status_EGMState_Parse(name, value);
  }

  typedef Status_MotorState MotorState;
  static constexpr MotorState MOTORS_UNDEFINED =
    Status_MotorState_MOTORS_UNDEFINED;
  static constexpr MotorState MOTORS_ON =
    Status_MotorState_MOTORS_ON;
  static constexpr MotorState MOTORS_OFF =
    Status_MotorState_MOTORS_OFF;
  static inline bool MotorState_IsValid(int value) {
    return Status_MotorState_IsValid(value);
  }
  static constexpr MotorState MotorState_MIN =
    Status_MotorState_MotorState_MIN;
  static constexpr MotorState MotorState_MAX =
    Status_MotorState_MotorState_MAX;
  static constexpr int MotorState_ARRAYSIZE =
    Status_MotorState_MotorState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MotorState_descriptor() {
    return Status_MotorState_descriptor();
  }
  template<typename T>
  static inline const std::string& MotorState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MotorState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MotorState_Name.");
    return Status_MotorState_Name(enum_t_value);
  }
  static inline bool MotorState_Parse(const std::string& name,
      MotorState* value) {
    return Status_MotorState_Parse(name, value);
  }

  typedef Status_RAPIDExecutionState RAPIDExecutionState;
  static constexpr RAPIDExecutionState RAPID_UNDEFINED =
    Status_RAPIDExecutionState_RAPID_UNDEFINED;
  static constexpr RAPIDExecutionState RAPID_STOPPED =
    Status_RAPIDExecutionState_RAPID_STOPPED;
  static constexpr RAPIDExecutionState RAPID_RUNNING =
    Status_RAPIDExecutionState_RAPID_RUNNING;
  static inline bool RAPIDExecutionState_IsValid(int value) {
    return Status_RAPIDExecutionState_IsValid(value);
  }
  static constexpr RAPIDExecutionState RAPIDExecutionState_MIN =
    Status_RAPIDExecutionState_RAPIDExecutionState_MIN;
  static constexpr RAPIDExecutionState RAPIDExecutionState_MAX =
    Status_RAPIDExecutionState_RAPIDExecutionState_MAX;
  static constexpr int RAPIDExecutionState_ARRAYSIZE =
    Status_RAPIDExecutionState_RAPIDExecutionState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RAPIDExecutionState_descriptor() {
    return Status_RAPIDExecutionState_descriptor();
  }
  template<typename T>
  static inline const std::string& RAPIDExecutionState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RAPIDExecutionState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RAPIDExecutionState_Name.");
    return Status_RAPIDExecutionState_Name(enum_t_value);
  }
  static inline bool RAPIDExecutionState_Parse(const std::string& name,
      RAPIDExecutionState* value) {
    return Status_RAPIDExecutionState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEgmConvergenceMetFieldNumber = 1,
    kEgmStateFieldNumber = 2,
    kMotorStateFieldNumber = 3,
    kRapidExecutionStateFieldNumber = 4,
  };
  // optional bool egm_convergence_met = 1;
  bool has_egm_convergence_met() const;
  private:
  bool _internal_has_egm_convergence_met() const;
  public:
  void clear_egm_convergence_met();
  bool egm_convergence_met() const;
  void set_egm_convergence_met(bool value);
  private:
  bool _internal_egm_convergence_met() const;
  void _internal_set_egm_convergence_met(bool value);
  public:

  // optional .abb.egm.wrapper.Status.EGMState egm_state = 2 [default = EGM_UNDEFINED];
  bool has_egm_state() const;
  private:
  bool _internal_has_egm_state() const;
  public:
  void clear_egm_state();
  ::abb::egm::wrapper::Status_EGMState egm_state() const;
  void set_egm_state(::abb::egm::wrapper::Status_EGMState value);
  private:
  ::abb::egm::wrapper::Status_EGMState _internal_egm_state() const;
  void _internal_set_egm_state(::abb::egm::wrapper::Status_EGMState value);
  public:

  // optional .abb.egm.wrapper.Status.MotorState motor_state = 3 [default = MOTORS_UNDEFINED];
  bool has_motor_state() const;
  private:
  bool _internal_has_motor_state() const;
  public:
  void clear_motor_state();
  ::abb::egm::wrapper::Status_MotorState motor_state() const;
  void set_motor_state(::abb::egm::wrapper::Status_MotorState value);
  private:
  ::abb::egm::wrapper::Status_MotorState _internal_motor_state() const;
  void _internal_set_motor_state(::abb::egm::wrapper::Status_MotorState value);
  public:

  // optional .abb.egm.wrapper.Status.RAPIDExecutionState rapid_execution_state = 4 [default = RAPID_UNDEFINED];
  bool has_rapid_execution_state() const;
  private:
  bool _internal_has_rapid_execution_state() const;
  public:
  void clear_rapid_execution_state();
  ::abb::egm::wrapper::Status_RAPIDExecutionState rapid_execution_state() const;
  void set_rapid_execution_state(::abb::egm::wrapper::Status_RAPIDExecutionState value);
  private:
  ::abb::egm::wrapper::Status_RAPIDExecutionState _internal_rapid_execution_state() const;
  void _internal_set_rapid_execution_state(::abb::egm::wrapper::Status_RAPIDExecutionState value);
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Status)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool egm_convergence_met_;
  int egm_state_;
  int motor_state_;
  int rapid_execution_state_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Clock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Clock) */ {
 public:
  Clock();
  virtual ~Clock();

  Clock(const Clock& from);
  Clock(Clock&& from) noexcept
    : Clock() {
    *this = ::std::move(from);
  }

  inline Clock& operator=(const Clock& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clock& operator=(Clock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Clock* internal_default_instance() {
    return reinterpret_cast<const Clock*>(
               &_Clock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Clock& a, Clock& b) {
    a.Swap(&b);
  }
  inline void Swap(Clock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clock* New() const final {
    return CreateMaybeMessage<Clock>(nullptr);
  }

  Clock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clock& from);
  void MergeFrom(const Clock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Clock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecFieldNumber = 1,
    kUsecFieldNumber = 2,
  };
  // optional uint64 sec = 1;
  bool has_sec() const;
  private:
  bool _internal_has_sec() const;
  public:
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::uint64 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 usec = 2;
  bool has_usec() const;
  private:
  bool _internal_has_usec() const;
  public:
  void clear_usec();
  ::PROTOBUF_NAMESPACE_ID::uint64 usec() const;
  void set_usec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_usec() const;
  void _internal_set_usec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Clock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sec_;
  ::PROTOBUF_NAMESPACE_ID::uint64 usec_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Joints :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Joints) */ {
 public:
  Joints();
  virtual ~Joints();

  Joints(const Joints& from);
  Joints(Joints&& from) noexcept
    : Joints() {
    *this = ::std::move(from);
  }

  inline Joints& operator=(const Joints& from) {
    CopyFrom(from);
    return *this;
  }
  inline Joints& operator=(Joints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Joints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joints* internal_default_instance() {
    return reinterpret_cast<const Joints*>(
               &_Joints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Joints& a, Joints& b) {
    a.Swap(&b);
  }
  inline void Swap(Joints* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Joints* New() const final {
    return CreateMaybeMessage<Joints>(nullptr);
  }

  Joints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Joints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Joints& from);
  void MergeFrom(const Joints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Joints";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated double values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Joints)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class JointSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.JointSpace) */ {
 public:
  JointSpace();
  virtual ~JointSpace();

  JointSpace(const JointSpace& from);
  JointSpace(JointSpace&& from) noexcept
    : JointSpace() {
    *this = ::std::move(from);
  }

  inline JointSpace& operator=(const JointSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointSpace& operator=(JointSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointSpace* internal_default_instance() {
    return reinterpret_cast<const JointSpace*>(
               &_JointSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JointSpace& a, JointSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(JointSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointSpace* New() const final {
    return CreateMaybeMessage<JointSpace>(nullptr);
  }

  JointSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointSpace& from);
  void MergeFrom(const JointSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.JointSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kVelocityFieldNumber = 2,
  };
  // optional .abb.egm.wrapper.Joints position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::abb::egm::wrapper::Joints& position() const;
  ::abb::egm::wrapper::Joints* release_position();
  ::abb::egm::wrapper::Joints* mutable_position();
  void set_allocated_position(::abb::egm::wrapper::Joints* position);
  private:
  const ::abb::egm::wrapper::Joints& _internal_position() const;
  ::abb::egm::wrapper::Joints* _internal_mutable_position();
  public:

  // optional .abb.egm.wrapper.Joints velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::abb::egm::wrapper::Joints& velocity() const;
  ::abb::egm::wrapper::Joints* release_velocity();
  ::abb::egm::wrapper::Joints* mutable_velocity();
  void set_allocated_velocity(::abb::egm::wrapper::Joints* velocity);
  private:
  const ::abb::egm::wrapper::Joints& _internal_velocity() const;
  ::abb::egm::wrapper::Joints* _internal_mutable_velocity();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.JointSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Joints* position_;
  ::abb::egm::wrapper::Joints* velocity_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Cartesian :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Cartesian) */ {
 public:
  Cartesian();
  virtual ~Cartesian();

  Cartesian(const Cartesian& from);
  Cartesian(Cartesian&& from) noexcept
    : Cartesian() {
    *this = ::std::move(from);
  }

  inline Cartesian& operator=(const Cartesian& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cartesian& operator=(Cartesian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cartesian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cartesian* internal_default_instance() {
    return reinterpret_cast<const Cartesian*>(
               &_Cartesian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Cartesian& a, Cartesian& b) {
    a.Swap(&b);
  }
  inline void Swap(Cartesian* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cartesian* New() const final {
    return CreateMaybeMessage<Cartesian>(nullptr);
  }

  Cartesian* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cartesian>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cartesian& from);
  void MergeFrom(const Cartesian& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cartesian* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Cartesian";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Cartesian)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Euler :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Euler) */ {
 public:
  Euler();
  virtual ~Euler();

  Euler(const Euler& from);
  Euler(Euler&& from) noexcept
    : Euler() {
    *this = ::std::move(from);
  }

  inline Euler& operator=(const Euler& from) {
    CopyFrom(from);
    return *this;
  }
  inline Euler& operator=(Euler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Euler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Euler* internal_default_instance() {
    return reinterpret_cast<const Euler*>(
               &_Euler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Euler& a, Euler& b) {
    a.Swap(&b);
  }
  inline void Swap(Euler* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Euler* New() const final {
    return CreateMaybeMessage<Euler>(nullptr);
  }

  Euler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Euler>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Euler& from);
  void MergeFrom(const Euler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Euler* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Euler";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Euler)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Quaternion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Quaternion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU0FieldNumber = 1,
    kU1FieldNumber = 2,
    kU2FieldNumber = 3,
    kU3FieldNumber = 4,
  };
  // optional double u0 = 1;
  bool has_u0() const;
  private:
  bool _internal_has_u0() const;
  public:
  void clear_u0();
  double u0() const;
  void set_u0(double value);
  private:
  double _internal_u0() const;
  void _internal_set_u0(double value);
  public:

  // optional double u1 = 2;
  bool has_u1() const;
  private:
  bool _internal_has_u1() const;
  public:
  void clear_u1();
  double u1() const;
  void set_u1(double value);
  private:
  double _internal_u1() const;
  void _internal_set_u1(double value);
  public:

  // optional double u2 = 3;
  bool has_u2() const;
  private:
  bool _internal_has_u2() const;
  public:
  void clear_u2();
  double u2() const;
  void set_u2(double value);
  private:
  double _internal_u2() const;
  void _internal_set_u2(double value);
  public:

  // optional double u3 = 4;
  bool has_u3() const;
  private:
  bool _internal_has_u3() const;
  public:
  void clear_u3();
  double u3() const;
  void set_u3(double value);
  private:
  double _internal_u3() const;
  void _internal_set_u3(double value);
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Quaternion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double u0_;
  double u1_;
  double u2_;
  double u3_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class CartesianPose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.CartesianPose) */ {
 public:
  CartesianPose();
  virtual ~CartesianPose();

  CartesianPose(const CartesianPose& from);
  CartesianPose(CartesianPose&& from) noexcept
    : CartesianPose() {
    *this = ::std::move(from);
  }

  inline CartesianPose& operator=(const CartesianPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianPose& operator=(CartesianPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartesianPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartesianPose* internal_default_instance() {
    return reinterpret_cast<const CartesianPose*>(
               &_CartesianPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CartesianPose& a, CartesianPose& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianPose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianPose* New() const final {
    return CreateMaybeMessage<CartesianPose>(nullptr);
  }

  CartesianPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianPose& from);
  void MergeFrom(const CartesianPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.CartesianPose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kEulerFieldNumber = 2,
    kQuaternionFieldNumber = 3,
  };
  // optional .abb.egm.wrapper.Cartesian position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::abb::egm::wrapper::Cartesian& position() const;
  ::abb::egm::wrapper::Cartesian* release_position();
  ::abb::egm::wrapper::Cartesian* mutable_position();
  void set_allocated_position(::abb::egm::wrapper::Cartesian* position);
  private:
  const ::abb::egm::wrapper::Cartesian& _internal_position() const;
  ::abb::egm::wrapper::Cartesian* _internal_mutable_position();
  public:

  // optional .abb.egm.wrapper.Euler euler = 2;
  bool has_euler() const;
  private:
  bool _internal_has_euler() const;
  public:
  void clear_euler();
  const ::abb::egm::wrapper::Euler& euler() const;
  ::abb::egm::wrapper::Euler* release_euler();
  ::abb::egm::wrapper::Euler* mutable_euler();
  void set_allocated_euler(::abb::egm::wrapper::Euler* euler);
  private:
  const ::abb::egm::wrapper::Euler& _internal_euler() const;
  ::abb::egm::wrapper::Euler* _internal_mutable_euler();
  public:

  // optional .abb.egm.wrapper.Quaternion quaternion = 3;
  bool has_quaternion() const;
  private:
  bool _internal_has_quaternion() const;
  public:
  void clear_quaternion();
  const ::abb::egm::wrapper::Quaternion& quaternion() const;
  ::abb::egm::wrapper::Quaternion* release_quaternion();
  ::abb::egm::wrapper::Quaternion* mutable_quaternion();
  void set_allocated_quaternion(::abb::egm::wrapper::Quaternion* quaternion);
  private:
  const ::abb::egm::wrapper::Quaternion& _internal_quaternion() const;
  ::abb::egm::wrapper::Quaternion* _internal_mutable_quaternion();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.CartesianPose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Cartesian* position_;
  ::abb::egm::wrapper::Euler* euler_;
  ::abb::egm::wrapper::Quaternion* quaternion_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class CartesianVelocity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.CartesianVelocity) */ {
 public:
  CartesianVelocity();
  virtual ~CartesianVelocity();

  CartesianVelocity(const CartesianVelocity& from);
  CartesianVelocity(CartesianVelocity&& from) noexcept
    : CartesianVelocity() {
    *this = ::std::move(from);
  }

  inline CartesianVelocity& operator=(const CartesianVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianVelocity& operator=(CartesianVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartesianVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartesianVelocity* internal_default_instance() {
    return reinterpret_cast<const CartesianVelocity*>(
               &_CartesianVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CartesianVelocity& a, CartesianVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianVelocity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianVelocity* New() const final {
    return CreateMaybeMessage<CartesianVelocity>(nullptr);
  }

  CartesianVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianVelocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianVelocity& from);
  void MergeFrom(const CartesianVelocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianVelocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.CartesianVelocity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // optional .abb.egm.wrapper.Cartesian linear = 1;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::abb::egm::wrapper::Cartesian& linear() const;
  ::abb::egm::wrapper::Cartesian* release_linear();
  ::abb::egm::wrapper::Cartesian* mutable_linear();
  void set_allocated_linear(::abb::egm::wrapper::Cartesian* linear);
  private:
  const ::abb::egm::wrapper::Cartesian& _internal_linear() const;
  ::abb::egm::wrapper::Cartesian* _internal_mutable_linear();
  public:

  // optional .abb.egm.wrapper.Euler angular = 2;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::abb::egm::wrapper::Euler& angular() const;
  ::abb::egm::wrapper::Euler* release_angular();
  ::abb::egm::wrapper::Euler* mutable_angular();
  void set_allocated_angular(::abb::egm::wrapper::Euler* angular);
  private:
  const ::abb::egm::wrapper::Euler& _internal_angular() const;
  ::abb::egm::wrapper::Euler* _internal_mutable_angular();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.CartesianVelocity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Cartesian* linear_;
  ::abb::egm::wrapper::Euler* angular_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class CartesianSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.CartesianSpace) */ {
 public:
  CartesianSpace();
  virtual ~CartesianSpace();

  CartesianSpace(const CartesianSpace& from);
  CartesianSpace(CartesianSpace&& from) noexcept
    : CartesianSpace() {
    *this = ::std::move(from);
  }

  inline CartesianSpace& operator=(const CartesianSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianSpace& operator=(CartesianSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartesianSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartesianSpace* internal_default_instance() {
    return reinterpret_cast<const CartesianSpace*>(
               &_CartesianSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CartesianSpace& a, CartesianSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianSpace* New() const final {
    return CreateMaybeMessage<CartesianSpace>(nullptr);
  }

  CartesianSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianSpace& from);
  void MergeFrom(const CartesianSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.CartesianSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kVelocityFieldNumber = 2,
  };
  // optional .abb.egm.wrapper.CartesianPose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::abb::egm::wrapper::CartesianPose& pose() const;
  ::abb::egm::wrapper::CartesianPose* release_pose();
  ::abb::egm::wrapper::CartesianPose* mutable_pose();
  void set_allocated_pose(::abb::egm::wrapper::CartesianPose* pose);
  private:
  const ::abb::egm::wrapper::CartesianPose& _internal_pose() const;
  ::abb::egm::wrapper::CartesianPose* _internal_mutable_pose();
  public:

  // optional .abb.egm.wrapper.CartesianVelocity velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::abb::egm::wrapper::CartesianVelocity& velocity() const;
  ::abb::egm::wrapper::CartesianVelocity* release_velocity();
  ::abb::egm::wrapper::CartesianVelocity* mutable_velocity();
  void set_allocated_velocity(::abb::egm::wrapper::CartesianVelocity* velocity);
  private:
  const ::abb::egm::wrapper::CartesianVelocity& _internal_velocity() const;
  ::abb::egm::wrapper::CartesianVelocity* _internal_mutable_velocity();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.CartesianSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::CartesianPose* pose_;
  ::abb::egm::wrapper::CartesianVelocity* velocity_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Robot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Robot) */ {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(nullptr);
  }

  Robot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Robot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointsFieldNumber = 1,
    kCartesianFieldNumber = 2,
  };
  // optional .abb.egm.wrapper.JointSpace joints = 1;
  bool has_joints() const;
  private:
  bool _internal_has_joints() const;
  public:
  void clear_joints();
  const ::abb::egm::wrapper::JointSpace& joints() const;
  ::abb::egm::wrapper::JointSpace* release_joints();
  ::abb::egm::wrapper::JointSpace* mutable_joints();
  void set_allocated_joints(::abb::egm::wrapper::JointSpace* joints);
  private:
  const ::abb::egm::wrapper::JointSpace& _internal_joints() const;
  ::abb::egm::wrapper::JointSpace* _internal_mutable_joints();
  public:

  // optional .abb.egm.wrapper.CartesianSpace cartesian = 2;
  bool has_cartesian() const;
  private:
  bool _internal_has_cartesian() const;
  public:
  void clear_cartesian();
  const ::abb::egm::wrapper::CartesianSpace& cartesian() const;
  ::abb::egm::wrapper::CartesianSpace* release_cartesian();
  ::abb::egm::wrapper::CartesianSpace* mutable_cartesian();
  void set_allocated_cartesian(::abb::egm::wrapper::CartesianSpace* cartesian);
  private:
  const ::abb::egm::wrapper::CartesianSpace& _internal_cartesian() const;
  ::abb::egm::wrapper::CartesianSpace* _internal_mutable_cartesian();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Robot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::JointSpace* joints_;
  ::abb::egm::wrapper::CartesianSpace* cartesian_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class External :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.External) */ {
 public:
  External();
  virtual ~External();

  External(const External& from);
  External(External&& from) noexcept
    : External() {
    *this = ::std::move(from);
  }

  inline External& operator=(const External& from) {
    CopyFrom(from);
    return *this;
  }
  inline External& operator=(External&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const External& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const External* internal_default_instance() {
    return reinterpret_cast<const External*>(
               &_External_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(External& a, External& b) {
    a.Swap(&b);
  }
  inline void Swap(External* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline External* New() const final {
    return CreateMaybeMessage<External>(nullptr);
  }

  External* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<External>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const External& from);
  void MergeFrom(const External& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(External* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.External";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointsFieldNumber = 1,
  };
  // optional .abb.egm.wrapper.JointSpace joints = 1;
  bool has_joints() const;
  private:
  bool _internal_has_joints() const;
  public:
  void clear_joints();
  const ::abb::egm::wrapper::JointSpace& joints() const;
  ::abb::egm::wrapper::JointSpace* release_joints();
  ::abb::egm::wrapper::JointSpace* mutable_joints();
  void set_allocated_joints(::abb::egm::wrapper::JointSpace* joints);
  private:
  const ::abb::egm::wrapper::JointSpace& _internal_joints() const;
  ::abb::egm::wrapper::JointSpace* _internal_mutable_joints();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.External)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::JointSpace* joints_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Feedback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Feedback) */ {
 public:
  Feedback();
  virtual ~Feedback();

  Feedback(const Feedback& from);
  Feedback(Feedback&& from) noexcept
    : Feedback() {
    *this = ::std::move(from);
  }

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feedback& operator=(Feedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feedback* internal_default_instance() {
    return reinterpret_cast<const Feedback*>(
               &_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Feedback& a, Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(Feedback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feedback* New() const final {
    return CreateMaybeMessage<Feedback>(nullptr);
  }

  Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Feedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotFieldNumber = 1,
    kExternalFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // optional .abb.egm.wrapper.Robot robot = 1;
  bool has_robot() const;
  private:
  bool _internal_has_robot() const;
  public:
  void clear_robot();
  const ::abb::egm::wrapper::Robot& robot() const;
  ::abb::egm::wrapper::Robot* release_robot();
  ::abb::egm::wrapper::Robot* mutable_robot();
  void set_allocated_robot(::abb::egm::wrapper::Robot* robot);
  private:
  const ::abb::egm::wrapper::Robot& _internal_robot() const;
  ::abb::egm::wrapper::Robot* _internal_mutable_robot();
  public:

  // optional .abb.egm.wrapper.External external = 2;
  bool has_external() const;
  private:
  bool _internal_has_external() const;
  public:
  void clear_external();
  const ::abb::egm::wrapper::External& external() const;
  ::abb::egm::wrapper::External* release_external();
  ::abb::egm::wrapper::External* mutable_external();
  void set_allocated_external(::abb::egm::wrapper::External* external);
  private:
  const ::abb::egm::wrapper::External& _internal_external() const;
  ::abb::egm::wrapper::External* _internal_mutable_external();
  public:

  // optional .abb.egm.wrapper.Clock time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::abb::egm::wrapper::Clock& time() const;
  ::abb::egm::wrapper::Clock* release_time();
  ::abb::egm::wrapper::Clock* mutable_time();
  void set_allocated_time(::abb::egm::wrapper::Clock* time);
  private:
  const ::abb::egm::wrapper::Clock& _internal_time() const;
  ::abb::egm::wrapper::Clock* _internal_mutable_time();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Feedback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Robot* robot_;
  ::abb::egm::wrapper::External* external_;
  ::abb::egm::wrapper::Clock* time_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Planned :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Planned) */ {
 public:
  Planned();
  virtual ~Planned();

  Planned(const Planned& from);
  Planned(Planned&& from) noexcept
    : Planned() {
    *this = ::std::move(from);
  }

  inline Planned& operator=(const Planned& from) {
    CopyFrom(from);
    return *this;
  }
  inline Planned& operator=(Planned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Planned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Planned* internal_default_instance() {
    return reinterpret_cast<const Planned*>(
               &_Planned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Planned& a, Planned& b) {
    a.Swap(&b);
  }
  inline void Swap(Planned* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Planned* New() const final {
    return CreateMaybeMessage<Planned>(nullptr);
  }

  Planned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Planned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Planned& from);
  void MergeFrom(const Planned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Planned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Planned";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotFieldNumber = 1,
    kExternalFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // optional .abb.egm.wrapper.Robot robot = 1;
  bool has_robot() const;
  private:
  bool _internal_has_robot() const;
  public:
  void clear_robot();
  const ::abb::egm::wrapper::Robot& robot() const;
  ::abb::egm::wrapper::Robot* release_robot();
  ::abb::egm::wrapper::Robot* mutable_robot();
  void set_allocated_robot(::abb::egm::wrapper::Robot* robot);
  private:
  const ::abb::egm::wrapper::Robot& _internal_robot() const;
  ::abb::egm::wrapper::Robot* _internal_mutable_robot();
  public:

  // optional .abb.egm.wrapper.External external = 2;
  bool has_external() const;
  private:
  bool _internal_has_external() const;
  public:
  void clear_external();
  const ::abb::egm::wrapper::External& external() const;
  ::abb::egm::wrapper::External* release_external();
  ::abb::egm::wrapper::External* mutable_external();
  void set_allocated_external(::abb::egm::wrapper::External* external);
  private:
  const ::abb::egm::wrapper::External& _internal_external() const;
  ::abb::egm::wrapper::External* _internal_mutable_external();
  public:

  // optional .abb.egm.wrapper.Clock time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::abb::egm::wrapper::Clock& time() const;
  ::abb::egm::wrapper::Clock* release_time();
  ::abb::egm::wrapper::Clock* mutable_time();
  void set_allocated_time(::abb::egm::wrapper::Clock* time);
  private:
  const ::abb::egm::wrapper::Clock& _internal_time() const;
  ::abb::egm::wrapper::Clock* _internal_mutable_time();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Planned)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Robot* robot_;
  ::abb::egm::wrapper::External* external_;
  ::abb::egm::wrapper::Clock* time_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Input :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Input) */ {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Input";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kFeedbackFieldNumber = 2,
    kPlannedFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // optional .abb.egm.wrapper.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::abb::egm::wrapper::Header& header() const;
  ::abb::egm::wrapper::Header* release_header();
  ::abb::egm::wrapper::Header* mutable_header();
  void set_allocated_header(::abb::egm::wrapper::Header* header);
  private:
  const ::abb::egm::wrapper::Header& _internal_header() const;
  ::abb::egm::wrapper::Header* _internal_mutable_header();
  public:

  // optional .abb.egm.wrapper.Feedback feedback = 2;
  bool has_feedback() const;
  private:
  bool _internal_has_feedback() const;
  public:
  void clear_feedback();
  const ::abb::egm::wrapper::Feedback& feedback() const;
  ::abb::egm::wrapper::Feedback* release_feedback();
  ::abb::egm::wrapper::Feedback* mutable_feedback();
  void set_allocated_feedback(::abb::egm::wrapper::Feedback* feedback);
  private:
  const ::abb::egm::wrapper::Feedback& _internal_feedback() const;
  ::abb::egm::wrapper::Feedback* _internal_mutable_feedback();
  public:

  // optional .abb.egm.wrapper.Planned planned = 3;
  bool has_planned() const;
  private:
  bool _internal_has_planned() const;
  public:
  void clear_planned();
  const ::abb::egm::wrapper::Planned& planned() const;
  ::abb::egm::wrapper::Planned* release_planned();
  ::abb::egm::wrapper::Planned* mutable_planned();
  void set_allocated_planned(::abb::egm::wrapper::Planned* planned);
  private:
  const ::abb::egm::wrapper::Planned& _internal_planned() const;
  ::abb::egm::wrapper::Planned* _internal_mutable_planned();
  public:

  // optional .abb.egm.wrapper.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::abb::egm::wrapper::Status& status() const;
  ::abb::egm::wrapper::Status* release_status();
  ::abb::egm::wrapper::Status* mutable_status();
  void set_allocated_status(::abb::egm::wrapper::Status* status);
  private:
  const ::abb::egm::wrapper::Status& _internal_status() const;
  ::abb::egm::wrapper::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Input)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Header* header_;
  ::abb::egm::wrapper::Feedback* feedback_;
  ::abb::egm::wrapper::Planned* planned_;
  ::abb::egm::wrapper::Status* status_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// -------------------------------------------------------------------

class Output :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:abb.egm.wrapper.Output) */ {
 public:
  Output();
  virtual ~Output();

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Output* New() const final {
    return CreateMaybeMessage<Output>(nullptr);
  }

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Output& from);
  void MergeFrom(const Output& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "abb.egm.wrapper.Output";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_egm_5fwrapper_2eproto);
    return ::descriptor_table_egm_5fwrapper_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotFieldNumber = 1,
    kExternalFieldNumber = 2,
  };
  // optional .abb.egm.wrapper.Robot robot = 1;
  bool has_robot() const;
  private:
  bool _internal_has_robot() const;
  public:
  void clear_robot();
  const ::abb::egm::wrapper::Robot& robot() const;
  ::abb::egm::wrapper::Robot* release_robot();
  ::abb::egm::wrapper::Robot* mutable_robot();
  void set_allocated_robot(::abb::egm::wrapper::Robot* robot);
  private:
  const ::abb::egm::wrapper::Robot& _internal_robot() const;
  ::abb::egm::wrapper::Robot* _internal_mutable_robot();
  public:

  // optional .abb.egm.wrapper.External external = 2;
  bool has_external() const;
  private:
  bool _internal_has_external() const;
  public:
  void clear_external();
  const ::abb::egm::wrapper::External& external() const;
  ::abb::egm::wrapper::External* release_external();
  ::abb::egm::wrapper::External* mutable_external();
  void set_allocated_external(::abb::egm::wrapper::External* external);
  private:
  const ::abb::egm::wrapper::External& _internal_external() const;
  ::abb::egm::wrapper::External* _internal_mutable_external();
  public:

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.Output)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::abb::egm::wrapper::Robot* robot_;
  ::abb::egm::wrapper::External* external_;
  friend struct ::TableStruct_egm_5fwrapper_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// optional uint32 sequence_number = 1;
inline bool Header::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void Header::clear_sequence_number() {
  sequence_number_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Header.sequence_number)
  return _internal_sequence_number();
}
inline void Header::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sequence_number_ = value;
}
inline void Header::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Header.sequence_number)
}

// optional uint32 time_stamp = 2;
inline bool Header::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Header::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void Header::clear_time_stamp() {
  time_stamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::time_stamp() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Header.time_stamp)
  return _internal_time_stamp();
}
inline void Header::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_stamp_ = value;
}
inline void Header::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Header.time_stamp)
}

// optional .abb.egm.wrapper.Header.MessageType message_type = 3 [default = UNDEFINED];
inline bool Header::_internal_has_message_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Header::has_message_type() const {
  return _internal_has_message_type();
}
inline void Header::clear_message_type() {
  message_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::abb::egm::wrapper::Header_MessageType Header::_internal_message_type() const {
  return static_cast< ::abb::egm::wrapper::Header_MessageType >(message_type_);
}
inline ::abb::egm::wrapper::Header_MessageType Header::message_type() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Header.message_type)
  return _internal_message_type();
}
inline void Header::_internal_set_message_type(::abb::egm::wrapper::Header_MessageType value) {
  assert(::abb::egm::wrapper::Header_MessageType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  message_type_ = value;
}
inline void Header::set_message_type(::abb::egm::wrapper::Header_MessageType value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Header.message_type)
}

// -------------------------------------------------------------------

// Status

// optional bool egm_convergence_met = 1;
inline bool Status::_internal_has_egm_convergence_met() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Status::has_egm_convergence_met() const {
  return _internal_has_egm_convergence_met();
}
inline void Status::clear_egm_convergence_met() {
  egm_convergence_met_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Status::_internal_egm_convergence_met() const {
  return egm_convergence_met_;
}
inline bool Status::egm_convergence_met() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Status.egm_convergence_met)
  return _internal_egm_convergence_met();
}
inline void Status::_internal_set_egm_convergence_met(bool value) {
  _has_bits_[0] |= 0x00000001u;
  egm_convergence_met_ = value;
}
inline void Status::set_egm_convergence_met(bool value) {
  _internal_set_egm_convergence_met(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Status.egm_convergence_met)
}

// optional .abb.egm.wrapper.Status.EGMState egm_state = 2 [default = EGM_UNDEFINED];
inline bool Status::_internal_has_egm_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Status::has_egm_state() const {
  return _internal_has_egm_state();
}
inline void Status::clear_egm_state() {
  egm_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::abb::egm::wrapper::Status_EGMState Status::_internal_egm_state() const {
  return static_cast< ::abb::egm::wrapper::Status_EGMState >(egm_state_);
}
inline ::abb::egm::wrapper::Status_EGMState Status::egm_state() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Status.egm_state)
  return _internal_egm_state();
}
inline void Status::_internal_set_egm_state(::abb::egm::wrapper::Status_EGMState value) {
  assert(::abb::egm::wrapper::Status_EGMState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  egm_state_ = value;
}
inline void Status::set_egm_state(::abb::egm::wrapper::Status_EGMState value) {
  _internal_set_egm_state(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Status.egm_state)
}

// optional .abb.egm.wrapper.Status.MotorState motor_state = 3 [default = MOTORS_UNDEFINED];
inline bool Status::_internal_has_motor_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Status::has_motor_state() const {
  return _internal_has_motor_state();
}
inline void Status::clear_motor_state() {
  motor_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::abb::egm::wrapper::Status_MotorState Status::_internal_motor_state() const {
  return static_cast< ::abb::egm::wrapper::Status_MotorState >(motor_state_);
}
inline ::abb::egm::wrapper::Status_MotorState Status::motor_state() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Status.motor_state)
  return _internal_motor_state();
}
inline void Status::_internal_set_motor_state(::abb::egm::wrapper::Status_MotorState value) {
  assert(::abb::egm::wrapper::Status_MotorState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  motor_state_ = value;
}
inline void Status::set_motor_state(::abb::egm::wrapper::Status_MotorState value) {
  _internal_set_motor_state(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Status.motor_state)
}

// optional .abb.egm.wrapper.Status.RAPIDExecutionState rapid_execution_state = 4 [default = RAPID_UNDEFINED];
inline bool Status::_internal_has_rapid_execution_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Status::has_rapid_execution_state() const {
  return _internal_has_rapid_execution_state();
}
inline void Status::clear_rapid_execution_state() {
  rapid_execution_state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::abb::egm::wrapper::Status_RAPIDExecutionState Status::_internal_rapid_execution_state() const {
  return static_cast< ::abb::egm::wrapper::Status_RAPIDExecutionState >(rapid_execution_state_);
}
inline ::abb::egm::wrapper::Status_RAPIDExecutionState Status::rapid_execution_state() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Status.rapid_execution_state)
  return _internal_rapid_execution_state();
}
inline void Status::_internal_set_rapid_execution_state(::abb::egm::wrapper::Status_RAPIDExecutionState value) {
  assert(::abb::egm::wrapper::Status_RAPIDExecutionState_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  rapid_execution_state_ = value;
}
inline void Status::set_rapid_execution_state(::abb::egm::wrapper::Status_RAPIDExecutionState value) {
  _internal_set_rapid_execution_state(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Status.rapid_execution_state)
}

// -------------------------------------------------------------------

// Clock

// optional uint64 sec = 1;
inline bool Clock::_internal_has_sec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Clock::has_sec() const {
  return _internal_has_sec();
}
inline void Clock::clear_sec() {
  sec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Clock::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Clock::sec() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Clock.sec)
  return _internal_sec();
}
inline void Clock::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sec_ = value;
}
inline void Clock::set_sec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Clock.sec)
}

// optional uint64 usec = 2;
inline bool Clock::_internal_has_usec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Clock::has_usec() const {
  return _internal_has_usec();
}
inline void Clock::clear_usec() {
  usec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Clock::_internal_usec() const {
  return usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Clock::usec() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Clock.usec)
  return _internal_usec();
}
inline void Clock::_internal_set_usec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  usec_ = value;
}
inline void Clock::set_usec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_usec(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Clock.usec)
}

// -------------------------------------------------------------------

// Joints

// repeated double values = 1;
inline int Joints::_internal_values_size() const {
  return values_.size();
}
inline int Joints::values_size() const {
  return _internal_values_size();
}
inline void Joints::clear_values() {
  values_.Clear();
}
inline double Joints::_internal_values(int index) const {
  return values_.Get(index);
}
inline double Joints::values(int index) const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Joints.values)
  return _internal_values(index);
}
inline void Joints::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Joints.values)
}
inline void Joints::_internal_add_values(double value) {
  values_.Add(value);
}
inline void Joints::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:abb.egm.wrapper.Joints.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Joints::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Joints::values() const {
  // @@protoc_insertion_point(field_list:abb.egm.wrapper.Joints.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Joints::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Joints::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:abb.egm.wrapper.Joints.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// JointSpace

// optional .abb.egm.wrapper.Joints position = 1;
inline bool JointSpace::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool JointSpace::has_position() const {
  return _internal_has_position();
}
inline void JointSpace::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Joints& JointSpace::_internal_position() const {
  const ::abb::egm::wrapper::Joints* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Joints*>(
      &::abb::egm::wrapper::_Joints_default_instance_);
}
inline const ::abb::egm::wrapper::Joints& JointSpace::position() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.JointSpace.position)
  return _internal_position();
}
inline ::abb::egm::wrapper::Joints* JointSpace::release_position() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.JointSpace.position)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::Joints* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Joints* JointSpace::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Joints>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::abb::egm::wrapper::Joints* JointSpace::mutable_position() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.JointSpace.position)
  return _internal_mutable_position();
}
inline void JointSpace::set_allocated_position(::abb::egm::wrapper::Joints* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.JointSpace.position)
}

// optional .abb.egm.wrapper.Joints velocity = 2;
inline bool JointSpace::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool JointSpace::has_velocity() const {
  return _internal_has_velocity();
}
inline void JointSpace::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::Joints& JointSpace::_internal_velocity() const {
  const ::abb::egm::wrapper::Joints* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Joints*>(
      &::abb::egm::wrapper::_Joints_default_instance_);
}
inline const ::abb::egm::wrapper::Joints& JointSpace::velocity() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.JointSpace.velocity)
  return _internal_velocity();
}
inline ::abb::egm::wrapper::Joints* JointSpace::release_velocity() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.JointSpace.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::abb::egm::wrapper::Joints* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Joints* JointSpace::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Joints>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::abb::egm::wrapper::Joints* JointSpace::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.JointSpace.velocity)
  return _internal_mutable_velocity();
}
inline void JointSpace::set_allocated_velocity(::abb::egm::wrapper::Joints* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.JointSpace.velocity)
}

// -------------------------------------------------------------------

// Cartesian

// optional double x = 1;
inline bool Cartesian::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cartesian::has_x() const {
  return _internal_has_x();
}
inline void Cartesian::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Cartesian::_internal_x() const {
  return x_;
}
inline double Cartesian::x() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Cartesian.x)
  return _internal_x();
}
inline void Cartesian::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Cartesian::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Cartesian.x)
}

// optional double y = 2;
inline bool Cartesian::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Cartesian::has_y() const {
  return _internal_has_y();
}
inline void Cartesian::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Cartesian::_internal_y() const {
  return y_;
}
inline double Cartesian::y() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Cartesian.y)
  return _internal_y();
}
inline void Cartesian::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Cartesian::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Cartesian.y)
}

// optional double z = 3;
inline bool Cartesian::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Cartesian::has_z() const {
  return _internal_has_z();
}
inline void Cartesian::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Cartesian::_internal_z() const {
  return z_;
}
inline double Cartesian::z() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Cartesian.z)
  return _internal_z();
}
inline void Cartesian::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Cartesian::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Cartesian.z)
}

// -------------------------------------------------------------------

// Euler

// optional double x = 1;
inline bool Euler::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Euler::has_x() const {
  return _internal_has_x();
}
inline void Euler::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Euler::_internal_x() const {
  return x_;
}
inline double Euler::x() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Euler.x)
  return _internal_x();
}
inline void Euler::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Euler::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Euler.x)
}

// optional double y = 2;
inline bool Euler::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Euler::has_y() const {
  return _internal_has_y();
}
inline void Euler::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Euler::_internal_y() const {
  return y_;
}
inline double Euler::y() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Euler.y)
  return _internal_y();
}
inline void Euler::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Euler::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Euler.y)
}

// optional double z = 3;
inline bool Euler::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Euler::has_z() const {
  return _internal_has_z();
}
inline void Euler::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Euler::_internal_z() const {
  return z_;
}
inline double Euler::z() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Euler.z)
  return _internal_z();
}
inline void Euler::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Euler::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Euler.z)
}

// -------------------------------------------------------------------

// Quaternion

// optional double u0 = 1;
inline bool Quaternion::_internal_has_u0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Quaternion::has_u0() const {
  return _internal_has_u0();
}
inline void Quaternion::clear_u0() {
  u0_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Quaternion::_internal_u0() const {
  return u0_;
}
inline double Quaternion::u0() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Quaternion.u0)
  return _internal_u0();
}
inline void Quaternion::_internal_set_u0(double value) {
  _has_bits_[0] |= 0x00000001u;
  u0_ = value;
}
inline void Quaternion::set_u0(double value) {
  _internal_set_u0(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Quaternion.u0)
}

// optional double u1 = 2;
inline bool Quaternion::_internal_has_u1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Quaternion::has_u1() const {
  return _internal_has_u1();
}
inline void Quaternion::clear_u1() {
  u1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Quaternion::_internal_u1() const {
  return u1_;
}
inline double Quaternion::u1() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Quaternion.u1)
  return _internal_u1();
}
inline void Quaternion::_internal_set_u1(double value) {
  _has_bits_[0] |= 0x00000002u;
  u1_ = value;
}
inline void Quaternion::set_u1(double value) {
  _internal_set_u1(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Quaternion.u1)
}

// optional double u2 = 3;
inline bool Quaternion::_internal_has_u2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Quaternion::has_u2() const {
  return _internal_has_u2();
}
inline void Quaternion::clear_u2() {
  u2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Quaternion::_internal_u2() const {
  return u2_;
}
inline double Quaternion::u2() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Quaternion.u2)
  return _internal_u2();
}
inline void Quaternion::_internal_set_u2(double value) {
  _has_bits_[0] |= 0x00000004u;
  u2_ = value;
}
inline void Quaternion::set_u2(double value) {
  _internal_set_u2(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Quaternion.u2)
}

// optional double u3 = 4;
inline bool Quaternion::_internal_has_u3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Quaternion::has_u3() const {
  return _internal_has_u3();
}
inline void Quaternion::clear_u3() {
  u3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Quaternion::_internal_u3() const {
  return u3_;
}
inline double Quaternion::u3() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Quaternion.u3)
  return _internal_u3();
}
inline void Quaternion::_internal_set_u3(double value) {
  _has_bits_[0] |= 0x00000008u;
  u3_ = value;
}
inline void Quaternion::set_u3(double value) {
  _internal_set_u3(value);
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.Quaternion.u3)
}

// -------------------------------------------------------------------

// CartesianPose

// optional .abb.egm.wrapper.Cartesian position = 1;
inline bool CartesianPose::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool CartesianPose::has_position() const {
  return _internal_has_position();
}
inline void CartesianPose::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Cartesian& CartesianPose::_internal_position() const {
  const ::abb::egm::wrapper::Cartesian* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Cartesian*>(
      &::abb::egm::wrapper::_Cartesian_default_instance_);
}
inline const ::abb::egm::wrapper::Cartesian& CartesianPose::position() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.CartesianPose.position)
  return _internal_position();
}
inline ::abb::egm::wrapper::Cartesian* CartesianPose::release_position() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.CartesianPose.position)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::Cartesian* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Cartesian* CartesianPose::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Cartesian>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::abb::egm::wrapper::Cartesian* CartesianPose::mutable_position() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.CartesianPose.position)
  return _internal_mutable_position();
}
inline void CartesianPose::set_allocated_position(::abb::egm::wrapper::Cartesian* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.CartesianPose.position)
}

// optional .abb.egm.wrapper.Euler euler = 2;
inline bool CartesianPose::_internal_has_euler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || euler_ != nullptr);
  return value;
}
inline bool CartesianPose::has_euler() const {
  return _internal_has_euler();
}
inline void CartesianPose::clear_euler() {
  if (euler_ != nullptr) euler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::Euler& CartesianPose::_internal_euler() const {
  const ::abb::egm::wrapper::Euler* p = euler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Euler*>(
      &::abb::egm::wrapper::_Euler_default_instance_);
}
inline const ::abb::egm::wrapper::Euler& CartesianPose::euler() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.CartesianPose.euler)
  return _internal_euler();
}
inline ::abb::egm::wrapper::Euler* CartesianPose::release_euler() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.CartesianPose.euler)
  _has_bits_[0] &= ~0x00000002u;
  ::abb::egm::wrapper::Euler* temp = euler_;
  euler_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Euler* CartesianPose::_internal_mutable_euler() {
  _has_bits_[0] |= 0x00000002u;
  if (euler_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Euler>(GetArenaNoVirtual());
    euler_ = p;
  }
  return euler_;
}
inline ::abb::egm::wrapper::Euler* CartesianPose::mutable_euler() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.CartesianPose.euler)
  return _internal_mutable_euler();
}
inline void CartesianPose::set_allocated_euler(::abb::egm::wrapper::Euler* euler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete euler_;
  }
  if (euler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      euler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  euler_ = euler;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.CartesianPose.euler)
}

// optional .abb.egm.wrapper.Quaternion quaternion = 3;
inline bool CartesianPose::_internal_has_quaternion() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || quaternion_ != nullptr);
  return value;
}
inline bool CartesianPose::has_quaternion() const {
  return _internal_has_quaternion();
}
inline void CartesianPose::clear_quaternion() {
  if (quaternion_ != nullptr) quaternion_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::abb::egm::wrapper::Quaternion& CartesianPose::_internal_quaternion() const {
  const ::abb::egm::wrapper::Quaternion* p = quaternion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Quaternion*>(
      &::abb::egm::wrapper::_Quaternion_default_instance_);
}
inline const ::abb::egm::wrapper::Quaternion& CartesianPose::quaternion() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.CartesianPose.quaternion)
  return _internal_quaternion();
}
inline ::abb::egm::wrapper::Quaternion* CartesianPose::release_quaternion() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.CartesianPose.quaternion)
  _has_bits_[0] &= ~0x00000004u;
  ::abb::egm::wrapper::Quaternion* temp = quaternion_;
  quaternion_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Quaternion* CartesianPose::_internal_mutable_quaternion() {
  _has_bits_[0] |= 0x00000004u;
  if (quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Quaternion>(GetArenaNoVirtual());
    quaternion_ = p;
  }
  return quaternion_;
}
inline ::abb::egm::wrapper::Quaternion* CartesianPose::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.CartesianPose.quaternion)
  return _internal_mutable_quaternion();
}
inline void CartesianPose::set_allocated_quaternion(::abb::egm::wrapper::Quaternion* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete quaternion_;
  }
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  quaternion_ = quaternion;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.CartesianPose.quaternion)
}

// -------------------------------------------------------------------

// CartesianVelocity

// optional .abb.egm.wrapper.Cartesian linear = 1;
inline bool CartesianVelocity::_internal_has_linear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || linear_ != nullptr);
  return value;
}
inline bool CartesianVelocity::has_linear() const {
  return _internal_has_linear();
}
inline void CartesianVelocity::clear_linear() {
  if (linear_ != nullptr) linear_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Cartesian& CartesianVelocity::_internal_linear() const {
  const ::abb::egm::wrapper::Cartesian* p = linear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Cartesian*>(
      &::abb::egm::wrapper::_Cartesian_default_instance_);
}
inline const ::abb::egm::wrapper::Cartesian& CartesianVelocity::linear() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.CartesianVelocity.linear)
  return _internal_linear();
}
inline ::abb::egm::wrapper::Cartesian* CartesianVelocity::release_linear() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.CartesianVelocity.linear)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::Cartesian* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Cartesian* CartesianVelocity::_internal_mutable_linear() {
  _has_bits_[0] |= 0x00000001u;
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Cartesian>(GetArenaNoVirtual());
    linear_ = p;
  }
  return linear_;
}
inline ::abb::egm::wrapper::Cartesian* CartesianVelocity::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.CartesianVelocity.linear)
  return _internal_mutable_linear();
}
inline void CartesianVelocity::set_allocated_linear(::abb::egm::wrapper::Cartesian* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.CartesianVelocity.linear)
}

// optional .abb.egm.wrapper.Euler angular = 2;
inline bool CartesianVelocity::_internal_has_angular() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || angular_ != nullptr);
  return value;
}
inline bool CartesianVelocity::has_angular() const {
  return _internal_has_angular();
}
inline void CartesianVelocity::clear_angular() {
  if (angular_ != nullptr) angular_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::Euler& CartesianVelocity::_internal_angular() const {
  const ::abb::egm::wrapper::Euler* p = angular_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Euler*>(
      &::abb::egm::wrapper::_Euler_default_instance_);
}
inline const ::abb::egm::wrapper::Euler& CartesianVelocity::angular() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.CartesianVelocity.angular)
  return _internal_angular();
}
inline ::abb::egm::wrapper::Euler* CartesianVelocity::release_angular() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.CartesianVelocity.angular)
  _has_bits_[0] &= ~0x00000002u;
  ::abb::egm::wrapper::Euler* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Euler* CartesianVelocity::_internal_mutable_angular() {
  _has_bits_[0] |= 0x00000002u;
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Euler>(GetArenaNoVirtual());
    angular_ = p;
  }
  return angular_;
}
inline ::abb::egm::wrapper::Euler* CartesianVelocity::mutable_angular() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.CartesianVelocity.angular)
  return _internal_mutable_angular();
}
inline void CartesianVelocity::set_allocated_angular(::abb::egm::wrapper::Euler* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.CartesianVelocity.angular)
}

// -------------------------------------------------------------------

// CartesianSpace

// optional .abb.egm.wrapper.CartesianPose pose = 1;
inline bool CartesianSpace::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool CartesianSpace::has_pose() const {
  return _internal_has_pose();
}
inline void CartesianSpace::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::CartesianPose& CartesianSpace::_internal_pose() const {
  const ::abb::egm::wrapper::CartesianPose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::CartesianPose*>(
      &::abb::egm::wrapper::_CartesianPose_default_instance_);
}
inline const ::abb::egm::wrapper::CartesianPose& CartesianSpace::pose() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.CartesianSpace.pose)
  return _internal_pose();
}
inline ::abb::egm::wrapper::CartesianPose* CartesianSpace::release_pose() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.CartesianSpace.pose)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::CartesianPose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::CartesianPose* CartesianSpace::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000001u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::CartesianPose>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::abb::egm::wrapper::CartesianPose* CartesianSpace::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.CartesianSpace.pose)
  return _internal_mutable_pose();
}
inline void CartesianSpace::set_allocated_pose(::abb::egm::wrapper::CartesianPose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.CartesianSpace.pose)
}

// optional .abb.egm.wrapper.CartesianVelocity velocity = 2;
inline bool CartesianSpace::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool CartesianSpace::has_velocity() const {
  return _internal_has_velocity();
}
inline void CartesianSpace::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::CartesianVelocity& CartesianSpace::_internal_velocity() const {
  const ::abb::egm::wrapper::CartesianVelocity* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::CartesianVelocity*>(
      &::abb::egm::wrapper::_CartesianVelocity_default_instance_);
}
inline const ::abb::egm::wrapper::CartesianVelocity& CartesianSpace::velocity() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.CartesianSpace.velocity)
  return _internal_velocity();
}
inline ::abb::egm::wrapper::CartesianVelocity* CartesianSpace::release_velocity() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.CartesianSpace.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::abb::egm::wrapper::CartesianVelocity* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::CartesianVelocity* CartesianSpace::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::CartesianVelocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::abb::egm::wrapper::CartesianVelocity* CartesianSpace::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.CartesianSpace.velocity)
  return _internal_mutable_velocity();
}
inline void CartesianSpace::set_allocated_velocity(::abb::egm::wrapper::CartesianVelocity* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.CartesianSpace.velocity)
}

// -------------------------------------------------------------------

// Robot

// optional .abb.egm.wrapper.JointSpace joints = 1;
inline bool Robot::_internal_has_joints() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || joints_ != nullptr);
  return value;
}
inline bool Robot::has_joints() const {
  return _internal_has_joints();
}
inline void Robot::clear_joints() {
  if (joints_ != nullptr) joints_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::JointSpace& Robot::_internal_joints() const {
  const ::abb::egm::wrapper::JointSpace* p = joints_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::JointSpace*>(
      &::abb::egm::wrapper::_JointSpace_default_instance_);
}
inline const ::abb::egm::wrapper::JointSpace& Robot::joints() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Robot.joints)
  return _internal_joints();
}
inline ::abb::egm::wrapper::JointSpace* Robot::release_joints() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Robot.joints)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::JointSpace* temp = joints_;
  joints_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::JointSpace* Robot::_internal_mutable_joints() {
  _has_bits_[0] |= 0x00000001u;
  if (joints_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::JointSpace>(GetArenaNoVirtual());
    joints_ = p;
  }
  return joints_;
}
inline ::abb::egm::wrapper::JointSpace* Robot::mutable_joints() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Robot.joints)
  return _internal_mutable_joints();
}
inline void Robot::set_allocated_joints(::abb::egm::wrapper::JointSpace* joints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete joints_;
  }
  if (joints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      joints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joints, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  joints_ = joints;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Robot.joints)
}

// optional .abb.egm.wrapper.CartesianSpace cartesian = 2;
inline bool Robot::_internal_has_cartesian() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cartesian_ != nullptr);
  return value;
}
inline bool Robot::has_cartesian() const {
  return _internal_has_cartesian();
}
inline void Robot::clear_cartesian() {
  if (cartesian_ != nullptr) cartesian_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::CartesianSpace& Robot::_internal_cartesian() const {
  const ::abb::egm::wrapper::CartesianSpace* p = cartesian_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::CartesianSpace*>(
      &::abb::egm::wrapper::_CartesianSpace_default_instance_);
}
inline const ::abb::egm::wrapper::CartesianSpace& Robot::cartesian() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Robot.cartesian)
  return _internal_cartesian();
}
inline ::abb::egm::wrapper::CartesianSpace* Robot::release_cartesian() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Robot.cartesian)
  _has_bits_[0] &= ~0x00000002u;
  ::abb::egm::wrapper::CartesianSpace* temp = cartesian_;
  cartesian_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::CartesianSpace* Robot::_internal_mutable_cartesian() {
  _has_bits_[0] |= 0x00000002u;
  if (cartesian_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::CartesianSpace>(GetArenaNoVirtual());
    cartesian_ = p;
  }
  return cartesian_;
}
inline ::abb::egm::wrapper::CartesianSpace* Robot::mutable_cartesian() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Robot.cartesian)
  return _internal_mutable_cartesian();
}
inline void Robot::set_allocated_cartesian(::abb::egm::wrapper::CartesianSpace* cartesian) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cartesian_;
  }
  if (cartesian) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cartesian = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cartesian, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cartesian_ = cartesian;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Robot.cartesian)
}

// -------------------------------------------------------------------

// External

// optional .abb.egm.wrapper.JointSpace joints = 1;
inline bool External::_internal_has_joints() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || joints_ != nullptr);
  return value;
}
inline bool External::has_joints() const {
  return _internal_has_joints();
}
inline void External::clear_joints() {
  if (joints_ != nullptr) joints_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::JointSpace& External::_internal_joints() const {
  const ::abb::egm::wrapper::JointSpace* p = joints_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::JointSpace*>(
      &::abb::egm::wrapper::_JointSpace_default_instance_);
}
inline const ::abb::egm::wrapper::JointSpace& External::joints() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.External.joints)
  return _internal_joints();
}
inline ::abb::egm::wrapper::JointSpace* External::release_joints() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.External.joints)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::JointSpace* temp = joints_;
  joints_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::JointSpace* External::_internal_mutable_joints() {
  _has_bits_[0] |= 0x00000001u;
  if (joints_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::JointSpace>(GetArenaNoVirtual());
    joints_ = p;
  }
  return joints_;
}
inline ::abb::egm::wrapper::JointSpace* External::mutable_joints() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.External.joints)
  return _internal_mutable_joints();
}
inline void External::set_allocated_joints(::abb::egm::wrapper::JointSpace* joints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete joints_;
  }
  if (joints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      joints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joints, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  joints_ = joints;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.External.joints)
}

// -------------------------------------------------------------------

// Feedback

// optional .abb.egm.wrapper.Robot robot = 1;
inline bool Feedback::_internal_has_robot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || robot_ != nullptr);
  return value;
}
inline bool Feedback::has_robot() const {
  return _internal_has_robot();
}
inline void Feedback::clear_robot() {
  if (robot_ != nullptr) robot_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Robot& Feedback::_internal_robot() const {
  const ::abb::egm::wrapper::Robot* p = robot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Robot*>(
      &::abb::egm::wrapper::_Robot_default_instance_);
}
inline const ::abb::egm::wrapper::Robot& Feedback::robot() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Feedback.robot)
  return _internal_robot();
}
inline ::abb::egm::wrapper::Robot* Feedback::release_robot() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Feedback.robot)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::Robot* temp = robot_;
  robot_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Robot* Feedback::_internal_mutable_robot() {
  _has_bits_[0] |= 0x00000001u;
  if (robot_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Robot>(GetArenaNoVirtual());
    robot_ = p;
  }
  return robot_;
}
inline ::abb::egm::wrapper::Robot* Feedback::mutable_robot() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Feedback.robot)
  return _internal_mutable_robot();
}
inline void Feedback::set_allocated_robot(::abb::egm::wrapper::Robot* robot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete robot_;
  }
  if (robot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      robot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  robot_ = robot;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Feedback.robot)
}

// optional .abb.egm.wrapper.External external = 2;
inline bool Feedback::_internal_has_external() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || external_ != nullptr);
  return value;
}
inline bool Feedback::has_external() const {
  return _internal_has_external();
}
inline void Feedback::clear_external() {
  if (external_ != nullptr) external_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::External& Feedback::_internal_external() const {
  const ::abb::egm::wrapper::External* p = external_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::External*>(
      &::abb::egm::wrapper::_External_default_instance_);
}
inline const ::abb::egm::wrapper::External& Feedback::external() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Feedback.external)
  return _internal_external();
}
inline ::abb::egm::wrapper::External* Feedback::release_external() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Feedback.external)
  _has_bits_[0] &= ~0x00000002u;
  ::abb::egm::wrapper::External* temp = external_;
  external_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::External* Feedback::_internal_mutable_external() {
  _has_bits_[0] |= 0x00000002u;
  if (external_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::External>(GetArenaNoVirtual());
    external_ = p;
  }
  return external_;
}
inline ::abb::egm::wrapper::External* Feedback::mutable_external() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Feedback.external)
  return _internal_mutable_external();
}
inline void Feedback::set_allocated_external(::abb::egm::wrapper::External* external) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete external_;
  }
  if (external) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      external = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  external_ = external;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Feedback.external)
}

// optional .abb.egm.wrapper.Clock time = 3;
inline bool Feedback::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || time_ != nullptr);
  return value;
}
inline bool Feedback::has_time() const {
  return _internal_has_time();
}
inline void Feedback::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::abb::egm::wrapper::Clock& Feedback::_internal_time() const {
  const ::abb::egm::wrapper::Clock* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Clock*>(
      &::abb::egm::wrapper::_Clock_default_instance_);
}
inline const ::abb::egm::wrapper::Clock& Feedback::time() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Feedback.time)
  return _internal_time();
}
inline ::abb::egm::wrapper::Clock* Feedback::release_time() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Feedback.time)
  _has_bits_[0] &= ~0x00000004u;
  ::abb::egm::wrapper::Clock* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Clock* Feedback::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000004u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Clock>(GetArenaNoVirtual());
    time_ = p;
  }
  return time_;
}
inline ::abb::egm::wrapper::Clock* Feedback::mutable_time() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Feedback.time)
  return _internal_mutable_time();
}
inline void Feedback::set_allocated_time(::abb::egm::wrapper::Clock* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Feedback.time)
}

// -------------------------------------------------------------------

// Planned

// optional .abb.egm.wrapper.Robot robot = 1;
inline bool Planned::_internal_has_robot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || robot_ != nullptr);
  return value;
}
inline bool Planned::has_robot() const {
  return _internal_has_robot();
}
inline void Planned::clear_robot() {
  if (robot_ != nullptr) robot_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Robot& Planned::_internal_robot() const {
  const ::abb::egm::wrapper::Robot* p = robot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Robot*>(
      &::abb::egm::wrapper::_Robot_default_instance_);
}
inline const ::abb::egm::wrapper::Robot& Planned::robot() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Planned.robot)
  return _internal_robot();
}
inline ::abb::egm::wrapper::Robot* Planned::release_robot() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Planned.robot)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::Robot* temp = robot_;
  robot_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Robot* Planned::_internal_mutable_robot() {
  _has_bits_[0] |= 0x00000001u;
  if (robot_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Robot>(GetArenaNoVirtual());
    robot_ = p;
  }
  return robot_;
}
inline ::abb::egm::wrapper::Robot* Planned::mutable_robot() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Planned.robot)
  return _internal_mutable_robot();
}
inline void Planned::set_allocated_robot(::abb::egm::wrapper::Robot* robot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete robot_;
  }
  if (robot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      robot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  robot_ = robot;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Planned.robot)
}

// optional .abb.egm.wrapper.External external = 2;
inline bool Planned::_internal_has_external() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || external_ != nullptr);
  return value;
}
inline bool Planned::has_external() const {
  return _internal_has_external();
}
inline void Planned::clear_external() {
  if (external_ != nullptr) external_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::External& Planned::_internal_external() const {
  const ::abb::egm::wrapper::External* p = external_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::External*>(
      &::abb::egm::wrapper::_External_default_instance_);
}
inline const ::abb::egm::wrapper::External& Planned::external() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Planned.external)
  return _internal_external();
}
inline ::abb::egm::wrapper::External* Planned::release_external() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Planned.external)
  _has_bits_[0] &= ~0x00000002u;
  ::abb::egm::wrapper::External* temp = external_;
  external_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::External* Planned::_internal_mutable_external() {
  _has_bits_[0] |= 0x00000002u;
  if (external_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::External>(GetArenaNoVirtual());
    external_ = p;
  }
  return external_;
}
inline ::abb::egm::wrapper::External* Planned::mutable_external() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Planned.external)
  return _internal_mutable_external();
}
inline void Planned::set_allocated_external(::abb::egm::wrapper::External* external) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete external_;
  }
  if (external) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      external = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  external_ = external;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Planned.external)
}

// optional .abb.egm.wrapper.Clock time = 3;
inline bool Planned::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || time_ != nullptr);
  return value;
}
inline bool Planned::has_time() const {
  return _internal_has_time();
}
inline void Planned::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::abb::egm::wrapper::Clock& Planned::_internal_time() const {
  const ::abb::egm::wrapper::Clock* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Clock*>(
      &::abb::egm::wrapper::_Clock_default_instance_);
}
inline const ::abb::egm::wrapper::Clock& Planned::time() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Planned.time)
  return _internal_time();
}
inline ::abb::egm::wrapper::Clock* Planned::release_time() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Planned.time)
  _has_bits_[0] &= ~0x00000004u;
  ::abb::egm::wrapper::Clock* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Clock* Planned::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000004u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Clock>(GetArenaNoVirtual());
    time_ = p;
  }
  return time_;
}
inline ::abb::egm::wrapper::Clock* Planned::mutable_time() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Planned.time)
  return _internal_mutable_time();
}
inline void Planned::set_allocated_time(::abb::egm::wrapper::Clock* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Planned.time)
}

// -------------------------------------------------------------------

// Input

// optional .abb.egm.wrapper.Header header = 1;
inline bool Input::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool Input::has_header() const {
  return _internal_has_header();
}
inline void Input::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Header& Input::_internal_header() const {
  const ::abb::egm::wrapper::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Header*>(
      &::abb::egm::wrapper::_Header_default_instance_);
}
inline const ::abb::egm::wrapper::Header& Input::header() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Input.header)
  return _internal_header();
}
inline ::abb::egm::wrapper::Header* Input::release_header() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Input.header)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Header* Input::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::abb::egm::wrapper::Header* Input::mutable_header() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Input.header)
  return _internal_mutable_header();
}
inline void Input::set_allocated_header(::abb::egm::wrapper::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Input.header)
}

// optional .abb.egm.wrapper.Feedback feedback = 2;
inline bool Input::_internal_has_feedback() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || feedback_ != nullptr);
  return value;
}
inline bool Input::has_feedback() const {
  return _internal_has_feedback();
}
inline void Input::clear_feedback() {
  if (feedback_ != nullptr) feedback_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::Feedback& Input::_internal_feedback() const {
  const ::abb::egm::wrapper::Feedback* p = feedback_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Feedback*>(
      &::abb::egm::wrapper::_Feedback_default_instance_);
}
inline const ::abb::egm::wrapper::Feedback& Input::feedback() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Input.feedback)
  return _internal_feedback();
}
inline ::abb::egm::wrapper::Feedback* Input::release_feedback() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Input.feedback)
  _has_bits_[0] &= ~0x00000002u;
  ::abb::egm::wrapper::Feedback* temp = feedback_;
  feedback_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Feedback* Input::_internal_mutable_feedback() {
  _has_bits_[0] |= 0x00000002u;
  if (feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Feedback>(GetArenaNoVirtual());
    feedback_ = p;
  }
  return feedback_;
}
inline ::abb::egm::wrapper::Feedback* Input::mutable_feedback() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Input.feedback)
  return _internal_mutable_feedback();
}
inline void Input::set_allocated_feedback(::abb::egm::wrapper::Feedback* feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete feedback_;
  }
  if (feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feedback, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  feedback_ = feedback;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Input.feedback)
}

// optional .abb.egm.wrapper.Planned planned = 3;
inline bool Input::_internal_has_planned() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || planned_ != nullptr);
  return value;
}
inline bool Input::has_planned() const {
  return _internal_has_planned();
}
inline void Input::clear_planned() {
  if (planned_ != nullptr) planned_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::abb::egm::wrapper::Planned& Input::_internal_planned() const {
  const ::abb::egm::wrapper::Planned* p = planned_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Planned*>(
      &::abb::egm::wrapper::_Planned_default_instance_);
}
inline const ::abb::egm::wrapper::Planned& Input::planned() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Input.planned)
  return _internal_planned();
}
inline ::abb::egm::wrapper::Planned* Input::release_planned() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Input.planned)
  _has_bits_[0] &= ~0x00000004u;
  ::abb::egm::wrapper::Planned* temp = planned_;
  planned_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Planned* Input::_internal_mutable_planned() {
  _has_bits_[0] |= 0x00000004u;
  if (planned_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Planned>(GetArenaNoVirtual());
    planned_ = p;
  }
  return planned_;
}
inline ::abb::egm::wrapper::Planned* Input::mutable_planned() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Input.planned)
  return _internal_mutable_planned();
}
inline void Input::set_allocated_planned(::abb::egm::wrapper::Planned* planned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete planned_;
  }
  if (planned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      planned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planned, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  planned_ = planned;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Input.planned)
}

// optional .abb.egm.wrapper.Status status = 4;
inline bool Input::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool Input::has_status() const {
  return _internal_has_status();
}
inline void Input::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::abb::egm::wrapper::Status& Input::_internal_status() const {
  const ::abb::egm::wrapper::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Status*>(
      &::abb::egm::wrapper::_Status_default_instance_);
}
inline const ::abb::egm::wrapper::Status& Input::status() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Input.status)
  return _internal_status();
}
inline ::abb::egm::wrapper::Status* Input::release_status() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Input.status)
  _has_bits_[0] &= ~0x00000008u;
  ::abb::egm::wrapper::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Status* Input::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000008u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::abb::egm::wrapper::Status* Input::mutable_status() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Input.status)
  return _internal_mutable_status();
}
inline void Input::set_allocated_status(::abb::egm::wrapper::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Input.status)
}

// -------------------------------------------------------------------

// Output

// optional .abb.egm.wrapper.Robot robot = 1;
inline bool Output::_internal_has_robot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || robot_ != nullptr);
  return value;
}
inline bool Output::has_robot() const {
  return _internal_has_robot();
}
inline void Output::clear_robot() {
  if (robot_ != nullptr) robot_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::abb::egm::wrapper::Robot& Output::_internal_robot() const {
  const ::abb::egm::wrapper::Robot* p = robot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::Robot*>(
      &::abb::egm::wrapper::_Robot_default_instance_);
}
inline const ::abb::egm::wrapper::Robot& Output::robot() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Output.robot)
  return _internal_robot();
}
inline ::abb::egm::wrapper::Robot* Output::release_robot() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Output.robot)
  _has_bits_[0] &= ~0x00000001u;
  ::abb::egm::wrapper::Robot* temp = robot_;
  robot_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::Robot* Output::_internal_mutable_robot() {
  _has_bits_[0] |= 0x00000001u;
  if (robot_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::Robot>(GetArenaNoVirtual());
    robot_ = p;
  }
  return robot_;
}
inline ::abb::egm::wrapper::Robot* Output::mutable_robot() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Output.robot)
  return _internal_mutable_robot();
}
inline void Output::set_allocated_robot(::abb::egm::wrapper::Robot* robot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete robot_;
  }
  if (robot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      robot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  robot_ = robot;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Output.robot)
}

// optional .abb.egm.wrapper.External external = 2;
inline bool Output::_internal_has_external() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || external_ != nullptr);
  return value;
}
inline bool Output::has_external() const {
  return _internal_has_external();
}
inline void Output::clear_external() {
  if (external_ != nullptr) external_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::abb::egm::wrapper::External& Output::_internal_external() const {
  const ::abb::egm::wrapper::External* p = external_;
  return p != nullptr ? *p : *reinterpret_cast<const ::abb::egm::wrapper::External*>(
      &::abb::egm::wrapper::_External_default_instance_);
}
inline const ::abb::egm::wrapper::External& Output::external() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.Output.external)
  return _internal_external();
}
inline ::abb::egm::wrapper::External* Output::release_external() {
  // @@protoc_insertion_point(field_release:abb.egm.wrapper.Output.external)
  _has_bits_[0] &= ~0x00000002u;
  ::abb::egm::wrapper::External* temp = external_;
  external_ = nullptr;
  return temp;
}
inline ::abb::egm::wrapper::External* Output::_internal_mutable_external() {
  _has_bits_[0] |= 0x00000002u;
  if (external_ == nullptr) {
    auto* p = CreateMaybeMessage<::abb::egm::wrapper::External>(GetArenaNoVirtual());
    external_ = p;
  }
  return external_;
}
inline ::abb::egm::wrapper::External* Output::mutable_external() {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.Output.external)
  return _internal_mutable_external();
}
inline void Output::set_allocated_external(::abb::egm::wrapper::External* external) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete external_;
  }
  if (external) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      external = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  external_ = external;
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.Output.external)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wrapper
}  // namespace egm
}  // namespace abb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::abb::egm::wrapper::Header_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::abb::egm::wrapper::Header_MessageType>() {
  return ::abb::egm::wrapper::Header_MessageType_descriptor();
}
template <> struct is_proto_enum< ::abb::egm::wrapper::Status_EGMState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::abb::egm::wrapper::Status_EGMState>() {
  return ::abb::egm::wrapper::Status_EGMState_descriptor();
}
template <> struct is_proto_enum< ::abb::egm::wrapper::Status_MotorState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::abb::egm::wrapper::Status_MotorState>() {
  return ::abb::egm::wrapper::Status_MotorState_descriptor();
}
template <> struct is_proto_enum< ::abb::egm::wrapper::Status_RAPIDExecutionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::abb::egm::wrapper::Status_RAPIDExecutionState>() {
  return ::abb::egm::wrapper::Status_RAPIDExecutionState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_egm_5fwrapper_2eproto
